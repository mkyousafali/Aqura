{"version":3,"mappings":"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","names":["UserAuthService","username","password","users","userError","supabase","dbUser","passwordCheck","passwordError","permissions","token","user","error","quickAccessCode","userDetails","userDetailsError","sessions","sessionError","session","userId","data","permissionMap","perm","currentAttempts","loginMethod","expiresAt","timestamp","random","userAuth","isBrowser","createAuthStore","subscribe","set","update","writable","userStr","sessionStr","validUser","rememberMe","currentSession","userData","functionCode","action","hasPermission","_b","_a","_c","auth","VAPID_PUBLIC_KEY","SUPABASE_URL","SUPABASE_SERVICE_KEY","serviceRoleClient","PushNotificationService","__publicField","permission","get","persistentCurrentUser","deviceId","userUUID","deviceRegistration","createClient","__vitePreload","n","serviceSupabase","notification","payload","event","str","hash","i","char","hex","fullHex","userAgent","base64String","padding","base64","rawData","outputArray","pushNotificationService","currentUser","isAuthenticated","deviceSessions","PersistentAuthService","activeUser","userSession","authData","authError","_d","current","err","deviceSession","targetUser","u","sessionData","resolve","unsubscribe","timeout","activity","result","persistentAuthService"],"ignoreList":[],"sources":["../../../../../../src/lib/utils/userAuth.ts","../../../../../../src/lib/stores/auth.ts","../../../../../../src/lib/utils/pushNotifications.ts","../../../../../../src/lib/utils/persistentAuth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport type { User, UserPermissions, AuthSession } from '../stores/auth';\r\n\r\n// Database types matching our deployed schema\r\ninterface DatabaseUser {\r\n\tid: string;\r\n\tusername: string;\r\n\tpassword_hash: string;\r\n\tsalt: string;\r\n\tquick_access_code: string;\r\n\tquick_access_salt: string;\r\n\tuser_type: 'global' | 'branch_specific';\r\n\temployee_id?: string;\r\n\tbranch_id?: number;\r\n\trole_type: 'Master Admin' | 'Admin' | 'Position-based';\r\n\tposition_id?: string;\r\n\tavatar?: string;\r\n\tstatus: 'active' | 'inactive' | 'locked';\r\n\tis_first_login: boolean;\r\n\tfailed_login_attempts: number;\r\n\tlast_login_at?: string;\r\n\tcreated_at: string;\r\n\tupdated_at: string;\r\n}\r\n\r\ninterface DatabaseUserView {\r\n\tid: string;\r\n\tusername: string;\r\n\temployee_name: string;\r\n\tbranch_name: string;\r\n\trole_type: 'Master Admin' | 'Admin' | 'Position-based';\r\n\tstatus: 'active' | 'inactive' | 'locked';\r\n\tavatar?: string;\r\n\tlast_login?: string;\r\n\tis_first_login: boolean;\r\n\tfailed_login_attempts: number;\r\n\tuser_type: 'global' | 'branch_specific';\r\n\temployee_id?: string;\r\n\tbranch_id?: number;\r\n\tposition_id?: string;\r\n\tcreated_at: string;\r\n\tupdated_at: string;\r\n}\r\n\r\ninterface DatabaseUserPermissions {\r\n\tuser_id: string;\r\n\tusername: string;\r\n\trole_name: string;\r\n\tfunction_name: string;\r\n\tfunction_code: string;\r\n\tcan_view: boolean;\r\n\tcan_add: boolean;\r\n\tcan_edit: boolean;\r\n\tcan_delete: boolean;\r\n\tcan_export: boolean;\r\n}\r\n\r\n// User authentication service using real database\r\nexport class UserAuthService {\r\n\t\r\n\t/**\r\n\t * Authenticate user with username and password\r\n\t */\r\n\tasync loginWithCredentials(username: string, password: string): Promise<{ user: User; token: string }> {\r\n\t\ttry {\r\n\t\t\t// Step 1: Get user from database\r\n\t\t\tconst { data: users, error: userError } = await supabase\r\n\t\t\t\t.from('user_management_view')\r\n\t\t\t\t.select('*')\r\n\t\t\t\t.eq('username', username)\r\n\t\t\t\t.eq('status', 'active')\r\n\t\t\t\t.limit(1);\r\n\r\n\t\t\tif (userError) {\r\n\t\t\t\tthrow new Error('Database error: ' + userError.message);\r\n\t\t\t}\r\n\r\n\t\t\tif (!users || users.length === 0) {\r\n\t\t\t\tthrow new Error('Invalid username or password');\r\n\t\t\t}\r\n\r\n\t\t\tconst dbUser = users[0] as DatabaseUserView;\r\n\r\n\t\t\t// Step 2: Verify password using database function\r\n\t\t\tconst { data: passwordCheck, error: passwordError } = await supabase\r\n\t\t\t\t.rpc('verify_password', {\r\n\t\t\t\t\tpassword: password,\r\n\t\t\t\t\thash: await this.getPasswordHash(dbUser.id)\r\n\t\t\t\t});\r\n\r\n\t\t\tif (passwordError) {\r\n\t\t\t\tconsole.error('Password verification error:', passwordError);\r\n\t\t\t\tthrow new Error('Authentication failed');\r\n\t\t\t}\r\n\r\n\t\t\tif (!passwordCheck) {\r\n\t\t\t\t// Increment failed login attempts\r\n\t\t\t\tawait this.incrementFailedLoginAttempts(dbUser.id);\r\n\t\t\t\tthrow new Error('Invalid username or password');\r\n\t\t\t}\r\n\r\n\t\t\t// Step 3: Get user permissions\r\n\t\t\tconst permissions = await this.getUserPermissions(dbUser.id);\r\n\r\n\t\t\t// Step 4: Update last login and reset failed attempts\r\n\t\t\tawait this.updateLastLogin(dbUser.id);\r\n\r\n\t\t\t// Step 5: Create session token and return user data\r\n\t\t\tconst token = this.generateSessionToken();\r\n\t\t\tconst user = this.mapDatabaseUserToUser(dbUser, permissions);\r\n\r\n\t\t\t// Step 6: Store session in database\r\n\t\t\tawait this.createUserSession(dbUser.id, token, 'username_password');\r\n\r\n\t\t\treturn { user, token };\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Login error:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Authenticate user with quick access code\r\n\t */\r\n\tasync loginWithQuickAccess(quickAccessCode: string): Promise<{ user: User; token: string }> {\r\n\t\ttry {\r\n\t\t\t// Step 1: Validate code format\r\n\t\t\tif (!/^[0-9]{6}$/.test(quickAccessCode)) {\r\n\t\t\t\tthrow new Error('Invalid access code format');\r\n\t\t\t}\r\n\r\n\t\t\t// Step 2: Get user by quick access code directly from database\r\n\t\t\tconst { data: users, error: userError } = await supabase\r\n\t\t\t\t.from('users')\r\n\t\t\t\t.select(`\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t\tquick_access_code,\r\n\t\t\t\t\tquick_access_salt,\r\n\t\t\t\t\tstatus,\r\n\t\t\t\t\tuser_type,\r\n\t\t\t\t\temployee_id,\r\n\t\t\t\t\tbranch_id,\r\n\t\t\t\t\trole_type,\r\n\t\t\t\t\tposition_id,\r\n\t\t\t\t\tavatar\r\n\t\t\t\t`)\r\n\t\t\t\t.eq('status', 'active')\r\n\t\t\t\t.eq('quick_access_code', quickAccessCode)\r\n\t\t\t\t.limit(1);\r\n\r\n\t\t\tif (userError) {\r\n\t\t\t\tconsole.error('Database error:', userError);\r\n\t\t\t\tthrow new Error('Database error: ' + userError.message);\r\n\t\t\t}\r\n\r\n\t\t\tif (!users || users.length === 0) {\r\n\t\t\t\tthrow new Error('Invalid access code');\r\n\t\t\t}\r\n\r\n\t\t\tconst dbUser = users[0];\r\n\r\n\t\t\t// Step 3: Get user details from view\r\n\t\t\tconst { data: userDetails, error: userDetailsError } = await supabase\r\n\t\t\t\t.from('user_management_view')\r\n\t\t\t\t.select('*')\r\n\t\t\t\t.eq('id', dbUser.id)\r\n\t\t\t\t.single();\r\n\r\n\t\t\tif (userDetailsError || !userDetails) {\r\n\t\t\t\tconsole.error('User details error:', userDetailsError);\r\n\t\t\t\tthrow new Error('User details not found');\r\n\t\t\t}\r\n\r\n\t\t\t// Step 4: Get user permissions\r\n\t\t\tconst permissions = await this.getUserPermissions(dbUser.id);\r\n\r\n\t\t\t// Step 5: Update last login\r\n\t\t\tawait this.updateLastLogin(dbUser.id);\r\n\r\n\t\t\t// Step 6: Create session token and return user data\r\n\t\t\tconst token = this.generateSessionToken();\r\n\t\t\tconst user = this.mapDatabaseUserToUser(userDetails as DatabaseUserView, permissions);\r\n\r\n\t\t\t// Step 7: Store session in database\r\n\t\t\tawait this.createUserSession(dbUser.id, token, 'quick_access');\r\n\r\n\t\t\treturn { user, token };\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Quick access login error:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validate existing session token\r\n\t */\r\n\tasync validateSession(token: string): Promise<User | null> {\r\n\t\ttry {\r\n\t\t\t// Check if session exists and is active\r\n\t\t\tconst { data: sessions, error: sessionError } = await supabase\r\n\t\t\t\t.from('user_sessions')\r\n\t\t\t\t.select(`\r\n\t\t\t\t\t*,\r\n\t\t\t\t\tusers!inner(*)\r\n\t\t\t\t`)\r\n\t\t\t\t.eq('session_token', token)\r\n\t\t\t\t.eq('is_active', true)\r\n\t\t\t\t.gt('expires_at', new Date().toISOString())\r\n\t\t\t\t.limit(1);\r\n\r\n\t\t\tif (sessionError || !sessions || sessions.length === 0) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tconst session = sessions[0];\r\n\t\t\t\r\n\t\t\t// Get user details from view\r\n\t\t\tconst { data: userDetails, error: userError } = await supabase\r\n\t\t\t\t.from('user_management_view')\r\n\t\t\t\t.select('*')\r\n\t\t\t\t.eq('id', session.user_id)\r\n\t\t\t\t.eq('status', 'active')\r\n\t\t\t\t.single();\r\n\r\n\t\t\tif (userError || !userDetails) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Get user permissions\r\n\t\t\tconst permissions = await this.getUserPermissions(session.user_id);\r\n\t\t\t\r\n\t\t\treturn this.mapDatabaseUserToUser(userDetails as DatabaseUserView, permissions);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Session validation error:', error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Logout user and invalidate session\r\n\t */\r\n\tasync logout(token: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// End the session in database\r\n\t\t\tawait supabase\r\n\t\t\t\t.from('user_sessions')\r\n\t\t\t\t.update({\r\n\t\t\t\t\tis_active: false,\r\n\t\t\t\t\tended_at: new Date().toISOString()\r\n\t\t\t\t})\r\n\t\t\t\t.eq('session_token', token);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Logout error:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t// Private helper methods\r\n\r\n\tprivate async getPasswordHash(userId: string): Promise<string> {\r\n\t\tconst { data, error } = await supabase\r\n\t\t\t.from('users')\r\n\t\t\t.select('password_hash')\r\n\t\t\t.eq('id', userId)\r\n\t\t\t.single();\r\n\r\n\t\tif (error || !data) {\r\n\t\t\tthrow new Error('User not found');\r\n\t\t}\r\n\r\n\t\treturn data.password_hash;\r\n\t}\r\n\r\n\tprivate async getUserPermissions(userId: string): Promise<UserPermissions> {\r\n\t\tconst { data: permissions, error } = await supabase\r\n\t\t\t.from('user_permissions_view')\r\n\t\t\t.select('*')\r\n\t\t\t.eq('user_id', userId);\r\n\r\n\t\tif (error) {\r\n\t\t\tconsole.error('Error fetching permissions:', error);\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tconst permissionMap: UserPermissions = {};\r\n\t\t\r\n\t\tif (permissions) {\r\n\t\t\tpermissions.forEach((perm: DatabaseUserPermissions) => {\r\n\t\t\t\tpermissionMap[perm.function_code] = {\r\n\t\t\t\t\tcan_view: perm.can_view,\r\n\t\t\t\t\tcan_add: perm.can_add,\r\n\t\t\t\t\tcan_edit: perm.can_edit,\r\n\t\t\t\t\tcan_delete: perm.can_delete,\r\n\t\t\t\t\tcan_export: perm.can_export\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn permissionMap;\r\n\t}\r\n\r\n\tprivate async incrementFailedLoginAttempts(userId: string): Promise<void> {\r\n\t\t// First get current count\r\n\t\tconst { data: user } = await supabase\r\n\t\t\t.from('users')\r\n\t\t\t.select('failed_login_attempts')\r\n\t\t\t.eq('id', userId)\r\n\t\t\t.single();\r\n\r\n\t\tconst currentAttempts = user?.failed_login_attempts || 0;\r\n\r\n\t\tawait supabase\r\n\t\t\t.from('users')\r\n\t\t\t.update({\r\n\t\t\t\tfailed_login_attempts: currentAttempts + 1\r\n\t\t\t})\r\n\t\t\t.eq('id', userId);\r\n\t}\r\n\r\n\tprivate async updateLastLogin(userId: string): Promise<void> {\r\n\t\tawait supabase\r\n\t\t\t.from('users')\r\n\t\t\t.update({\r\n\t\t\t\tlast_login_at: new Date().toISOString(),\r\n\t\t\t\tfailed_login_attempts: 0\r\n\t\t\t})\r\n\t\t\t.eq('id', userId);\r\n\t}\r\n\r\n\tprivate async createUserSession(userId: string, token: string, loginMethod: string): Promise<void> {\r\n\t\tconst expiresAt = new Date();\r\n\t\texpiresAt.setHours(expiresAt.getHours() + (loginMethod === 'quick_access' ? 8 : 24));\r\n\r\n\t\tawait supabase\r\n\t\t\t.from('user_sessions')\r\n\t\t\t.insert({\r\n\t\t\t\tuser_id: userId,\r\n\t\t\t\tsession_token: token,\r\n\t\t\t\tlogin_method: loginMethod,\r\n\t\t\t\texpires_at: expiresAt.toISOString(),\r\n\t\t\t\tis_active: true\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate generateSessionToken(): string {\r\n\t\tconst timestamp = Date.now().toString();\r\n\t\tconst random = Math.random().toString(36).substring(2);\r\n\t\treturn `aqura_${timestamp}_${random}`;\r\n\t}\r\n\r\n\tprivate mapDatabaseUserToUser(dbUser: DatabaseUserView, permissions: UserPermissions): User {\r\n\t\treturn {\r\n\t\t\tid: dbUser.id,\r\n\t\t\tusername: dbUser.username,\r\n\t\t\trole: dbUser.role_type,\r\n\t\t\troleType: dbUser.role_type,\r\n\t\t\tuserType: dbUser.user_type,\r\n\t\t\tavatar: dbUser.avatar,\r\n\t\t\temployeeName: dbUser.employee_name,\r\n\t\t\tbranchName: dbUser.branch_name,\r\n\t\t\tlastLogin: dbUser.last_login,\r\n\t\t\tpermissions\r\n\t\t};\r\n\t}\r\n}\r\n\r\n// Export singleton instance\r\nexport const userAuth = new UserAuthService();","import { writable } from 'svelte/store';\r\nimport { userAuth } from '../utils/userAuth';\r\n\r\n// Check if we're in browser environment\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n// Types for authentication\r\nexport interface User {\r\n\tid: string;\r\n\tusername: string;\r\n\trole: string;\r\n\troleType: 'Master Admin' | 'Admin' | 'Position-based';\r\n\tuserType: 'global' | 'branch_specific';\r\n\tavatar?: string;\r\n\temployeeName?: string;\r\n\tbranchName?: string;\r\n\tlastLogin?: string;\r\n\tpermissions?: UserPermissions;\r\n}\r\n\r\nexport interface UserPermissions {\r\n\t[functionCode: string]: {\r\n\t\tcan_view: boolean;\r\n\t\tcan_add: boolean;\r\n\t\tcan_edit: boolean;\r\n\t\tcan_delete: boolean;\r\n\t\tcan_export: boolean;\r\n\t};\r\n}\r\n\r\nexport interface AuthSession {\r\n\ttoken: string;\r\n\tuser: User;\r\n\tloginMethod: 'username' | 'quickAccess';\r\n\tloginTime: string;\r\n\texpiresAt: string;\r\n}\r\n\r\n// Authentication store\r\nfunction createAuthStore() {\r\n\tconst { subscribe, set, update } = writable<AuthSession | null>(null);\r\n\r\n\treturn {\r\n\t\tsubscribe,\r\n\t\t// Initialize auth state from localStorage\r\n\t\tinit: async () => {\r\n\t\t\tif (!isBrowser) return;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst token = localStorage.getItem('aqura-auth-token');\r\n\t\t\t\tconst userStr = localStorage.getItem('aqura-user');\r\n\t\t\t\tconst sessionStr = localStorage.getItem('aqura-session');\r\n\t\t\t\t\r\n\t\t\t\tif (token && userStr && sessionStr) {\r\n\t\t\t\t\tconst user = JSON.parse(userStr);\r\n\t\t\t\t\tconst session = JSON.parse(sessionStr);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Check if session is still valid (client-side check)\r\n\t\t\t\t\tif (new Date(session.expiresAt) > new Date()) {\r\n\t\t\t\t\t\t// Also validate with database\r\n\t\t\t\t\t\tconst validUser = await userAuth.validateSession(token);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (validUser) {\r\n\t\t\t\t\t\t\tset({\r\n\t\t\t\t\t\t\t\ttoken,\r\n\t\t\t\t\t\t\t\tuser: validUser, // Use the validated user data\r\n\t\t\t\t\t\t\t\t...session\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Session invalid, clear storage\r\n\t\t\t\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Session expired, clear storage\r\n\t\t\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error initializing auth:', error);\r\n\t\t\t\t// Clear potentially corrupted data\r\n\t\t\t\tif (isBrowser) {\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Login with username/password\r\n\t\tloginWithCredentials: async (username: string, password: string, rememberMe: boolean = false) => {\r\n\t\t\ttry {\r\n\t\t\t\t// Use real authentication service\r\n\t\t\t\tconst { user, token } = await userAuth.loginWithCredentials(username, password);\r\n\t\t\t\t\r\n\t\t\t\tconst expiresAt = new Date();\r\n\t\t\t\texpiresAt.setHours(expiresAt.getHours() + (rememberMe ? 720 : 24)); // 30 days or 24 hours\r\n\t\t\t\t\r\n\t\t\t\tconst session: AuthSession = {\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tuser,\r\n\t\t\t\t\tloginMethod: 'username',\r\n\t\t\t\t\tloginTime: new Date().toISOString(),\r\n\t\t\t\t\texpiresAt: expiresAt.toISOString()\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t// Store in localStorage\r\n\t\t\t\tif (isBrowser) {\r\n\t\t\t\t\tlocalStorage.setItem('aqura-auth-token', session.token);\r\n\t\t\t\t\tlocalStorage.setItem('aqura-user', JSON.stringify(session.user));\r\n\t\t\t\t\tlocalStorage.setItem('aqura-session', JSON.stringify({\r\n\t\t\t\t\t\tloginMethod: session.loginMethod,\r\n\t\t\t\t\t\tloginTime: session.loginTime,\r\n\t\t\t\t\t\texpiresAt: session.expiresAt\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tset(session);\r\n\t\t\t\treturn { success: true, user };\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Login error:', error);\r\n\t\t\t\tthrow new Error(error.message || 'Login failed');\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Login with quick access code\r\n\t\tloginWithQuickAccess: async (quickAccessCode: string) => {\r\n\t\t\ttry {\r\n\t\t\t\t// Use real authentication service\r\n\t\t\t\tconst { user, token } = await userAuth.loginWithQuickAccess(quickAccessCode);\r\n\t\t\t\t\r\n\t\t\t\tconst expiresAt = new Date();\r\n\t\t\t\texpiresAt.setHours(expiresAt.getHours() + 8); // 8 hours for quick access\r\n\t\t\t\t\r\n\t\t\t\tconst session: AuthSession = {\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tuser,\r\n\t\t\t\t\tloginMethod: 'quickAccess',\r\n\t\t\t\t\tloginTime: new Date().toISOString(),\r\n\t\t\t\t\texpiresAt: expiresAt.toISOString()\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t// Store in localStorage\r\n\t\t\t\tif (isBrowser) {\r\n\t\t\t\t\tlocalStorage.setItem('aqura-auth-token', session.token);\r\n\t\t\t\t\tlocalStorage.setItem('aqura-user', JSON.stringify(session.user));\r\n\t\t\t\t\tlocalStorage.setItem('aqura-session', JSON.stringify({\r\n\t\t\t\t\t\tloginMethod: session.loginMethod,\r\n\t\t\t\t\t\tloginTime: session.loginTime,\r\n\t\t\t\t\t\texpiresAt: session.expiresAt\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tset(session);\r\n\t\t\t\treturn { success: true, user };\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Quick access error:', error);\r\n\t\t\t\tthrow new Error(error.message || 'Quick access failed');\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Logout\r\n\t\tlogout: async () => {\r\n\t\t\tconsole.log('Auth store logout called');\r\n\t\t\t\r\n\t\t\tlet currentSession: AuthSession | null = null;\r\n\t\t\tupdate(session => {\r\n\t\t\t\tcurrentSession = session;\r\n\t\t\t\treturn session;\r\n\t\t\t});\r\n\r\n\t\t\t// End session in database\r\n\t\t\tif (currentSession?.token) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait userAuth.logout(currentSession.token);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error ending session in database:', error);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isBrowser) {\r\n\t\t\t\tconsole.log('Clearing localStorage items...');\r\n\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\tconsole.log('localStorage cleared');\r\n\t\t\t}\r\n\t\t\tconsole.log('Setting auth state to null');\r\n\t\t\tset(null);\r\n\t\t\tconsole.log('Logout completed');\r\n\t\t},\r\n\t\t\r\n\t\t// Update user data\r\n\t\tupdateUser: (userData: Partial<User>) => {\r\n\t\t\tupdate(session => {\r\n\t\t\t\tif (session) {\r\n\t\t\t\t\tsession.user = { ...session.user, ...userData };\r\n\t\t\t\t\tif (isBrowser) {\r\n\t\t\t\t\t\tlocalStorage.setItem('aqura-user', JSON.stringify(session.user));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn session;\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t// Check if user has permission for a specific function\r\n\t\thasPermission: (functionCode: string, action: 'view' | 'add' | 'edit' | 'delete' | 'export'): boolean => {\r\n\t\t\tlet hasPermission = false;\r\n\t\t\tupdate(session => {\r\n\t\t\t\tif (session?.user?.permissions?.[functionCode]) {\r\n\t\t\t\t\tconst permission = session.user.permissions[functionCode];\r\n\t\t\t\t\thasPermission = permission[`can_${action}`] || false;\r\n\t\t\t\t} else if (session?.user?.roleType === 'Master Admin') {\r\n\t\t\t\t\t// Master Admin has all permissions\r\n\t\t\t\t\thasPermission = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn session;\r\n\t\t\t});\r\n\t\t\treturn hasPermission;\r\n\t\t},\r\n\t\t\r\n\t\t// Refresh session\r\n\t\trefreshSession: async () => {\r\n\t\t\tif (!isBrowser) return;\r\n\r\n\t\t\tconst token = localStorage.getItem('aqura-auth-token');\r\n\t\t\tif (!token) return;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Validate session with database\r\n\t\t\t\tconst user = await userAuth.validateSession(token);\r\n\t\t\t\t\r\n\t\t\t\tif (user) {\r\n\t\t\t\t\t// Session is valid, update user data\r\n\t\t\t\t\tupdate(session => {\r\n\t\t\t\t\t\tif (session) {\r\n\t\t\t\t\t\t\tsession.user = user;\r\n\t\t\t\t\t\t\tlocalStorage.setItem('aqura-user', JSON.stringify(user));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn session;\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Session is invalid, clear auth state\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\t\tset(null);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Session refresh error:', error);\r\n\t\t\t\t// Clear invalid session\r\n\t\t\t\tlocalStorage.removeItem('aqura-auth-token');\r\n\t\t\t\tlocalStorage.removeItem('aqura-user');\r\n\t\t\t\tlocalStorage.removeItem('aqura-session');\r\n\t\t\t\tset(null);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport const auth = createAuthStore();","import { supabase } from './supabase';\r\nimport { browser } from '$app/environment';\r\nimport { currentUser as persistentCurrentUser } from './persistentAuth';\r\nimport { get } from 'svelte/store';\r\n\r\n// Push notification configuration\r\nconst VAPID_PUBLIC_KEY = import.meta.env.VITE_VAPID_PUBLIC_KEY || 'your-vapid-public-key'; // Will need to be set\r\nconst SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://vmypotfsyrvuublyddyt.supabase.co';\r\nconst SUPABASE_SERVICE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZteXBvdGZzeXJ2dXVibHlkZHl0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjQ4MjQ4OSwiZXhwIjoyMDcyMDU4NDg5fQ.RmkgY9IQ-XzNeUvcuEbrQlF6P4-8BjJkjKnB8h8HoPQ';\r\n\r\n// Singleton service role client to avoid multiple instances\r\nlet serviceRoleClient: any = null;\r\n\r\ninterface DeviceRegistration {\r\n\tuser_id: string;\r\n\tdevice_id: string;\r\n\tendpoint: string;\r\n\tp256dh: string;\r\n\tauth: string;\r\n\tdevice_type: 'mobile' | 'desktop';\r\n\tbrowser_name: string;\r\n\tuser_agent: string;\r\n\tis_active: boolean;\r\n\tlast_seen: string;\r\n}\r\n\r\ninterface NotificationPayload {\r\n\ttitle: string;\r\n\tbody: string;\r\n\ticon?: string;\r\n\tbadge?: string;\r\n\timage?: string;\r\n\tdata?: any;\r\n\tactions?: Array<{\r\n\t\taction: string;\r\n\t\ttitle: string;\r\n\t\ticon?: string;\r\n\t}>;\r\n}\r\n\r\nexport class PushNotificationService {\r\n\tprivate swRegistration: ServiceWorkerRegistration | null = null;\r\n\tprivate subscription: PushSubscription | null = null;\r\n\r\n\t/**\r\n\t * Initialize push notification service\r\n\t */\r\n\tasync initialize(): Promise<boolean> {\r\n\t\tif (!browser || !('serviceWorker' in navigator) || !('PushManager' in window)) {\r\n\t\t\tconsole.warn('Push notifications not supported in this browser');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Register service worker\r\n\t\t\tthis.swRegistration = await navigator.serviceWorker.register('/sw.js', {\r\n\t\t\t\tscope: '/'\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log('Service Worker registered successfully');\r\n\r\n\t\t\t// Wait for service worker to be ready\r\n\t\t\tawait navigator.serviceWorker.ready;\r\n\r\n\t\t\t// Request notification permission\r\n\t\t\tconst permission = await this.requestPermission();\r\n\t\t\tif (permission !== 'granted') {\r\n\t\t\t\tconsole.warn('Notification permission not granted');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Subscribe to push notifications\r\n\t\t\tawait this.subscribeToPush();\r\n\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to initialize push notifications:', error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Request notification permission\r\n\t */\r\n\tasync requestPermission(): Promise<NotificationPermission> {\r\n\t\tif (!browser || !('Notification' in window)) {\r\n\t\t\treturn 'denied';\r\n\t\t}\r\n\r\n\t\tlet permission = Notification.permission;\r\n\r\n\t\tif (permission === 'default') {\r\n\t\t\tpermission = await Notification.requestPermission();\r\n\t\t}\r\n\r\n\t\treturn permission;\r\n\t}\r\n\r\n\t/**\r\n\t * Subscribe to push notifications\r\n\t */\r\n\tasync subscribeToPush(): Promise<PushSubscription | null> {\r\n\t\tif (!this.swRegistration) {\r\n\t\t\tconsole.error('Service worker not registered');\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Validate VAPID key before attempting subscription\r\n\t\t\tif (!VAPID_PUBLIC_KEY || VAPID_PUBLIC_KEY === 'your-vapid-public-key') {\r\n\t\t\t\tconsole.warn('⚠️ VAPID public key not configured. Push notifications disabled.');\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for existing subscription\r\n\t\t\tthis.subscription = await this.swRegistration.pushManager.getSubscription();\r\n\r\n\t\t\tif (!this.subscription) {\r\n\t\t\t\t// Create new subscription\r\n\t\t\t\tthis.subscription = await this.swRegistration.pushManager.subscribe({\r\n\t\t\t\t\tuserVisibleOnly: true,\r\n\t\t\t\t\tapplicationServerKey: this.urlBase64ToUint8Array(VAPID_PUBLIC_KEY) as BufferSource\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Register device with backend\r\n\t\t\tawait this.registerDevice();\r\n\r\n\t\t\treturn this.subscription;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to subscribe to push notifications:', error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Register device with backend\r\n\t */\r\n\tasync registerDevice(): Promise<void> {\r\n\t\tif (!this.subscription) {\r\n\t\t\tconsole.error('No push subscription available');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get current user from persistent auth\r\n\t\tconst user = get(persistentCurrentUser);\r\n\t\tif (!user) {\r\n\t\t\tconsole.error('No user logged in');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst deviceId = this.generateDeviceId();\r\n\r\n\t\t// Use the actual user ID since it should already be a valid UUID in the database\r\n\t\tconst userUUID = user.id;\r\n\r\n\t\tconst deviceRegistration: Partial<DeviceRegistration> = {\r\n\t\t\tuser_id: userUUID,\r\n\t\t\tdevice_id: deviceId,\r\n\t\t\tendpoint: this.subscription.endpoint,\r\n\t\t\tp256dh: this.subscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(this.subscription.getKey('p256dh')!))) : '',\r\n\t\t\tauth: this.subscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(this.subscription.getKey('auth')!))) : '',\r\n\t\t\tdevice_type: this.getDeviceType(),\r\n\t\t\tbrowser_name: this.getBrowserName(),\r\n\t\t\tuser_agent: navigator.userAgent,\r\n\t\t\tis_active: true,\r\n\t\t\tlast_seen: new Date().toISOString()\r\n\t\t};\r\n\r\n\t\tconsole.log('📱 Registering device:', {\r\n\t\t\toriginalUserId: user.id,\r\n\t\t\tmappedUUID: userUUID,\r\n\t\t\tdeviceId: deviceId,\r\n\t\t\tdeviceType: this.getDeviceType()\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\t// Use singleton service role client to avoid multiple instances\r\n\t\t\tif (!serviceRoleClient) {\r\n\t\t\t\tconst { createClient } = await import('@supabase/supabase-js');\r\n\t\t\t\tserviceRoleClient = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\r\n\t\t\t}\r\n\r\n\t\t\t// Upsert device registration using service role\r\n\t\t\tconst { error } = await serviceRoleClient\r\n\t\t\t\t.from('push_subscriptions')\r\n\t\t\t\t.upsert(deviceRegistration);\r\n\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\t// Store device ID locally\r\n\t\t\tlocalStorage.setItem('aqura-device-id', deviceId);\r\n\r\n\t\t\tconsole.log('Device registered for push notifications');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to register device:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Unregister device (on logout)\r\n\t */\r\n\tasync unregisterDevice(): Promise<void> {\r\n\t\tconst deviceId = localStorage.getItem('aqura-device-id');\r\n\t\tif (!deviceId) return;\r\n\r\n\t\ttry {\r\n\t\t\t// Create service role client for this operation\r\n\t\t\tconst { createClient } = await import('@supabase/supabase-js');\r\n\t\t\tconst serviceSupabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\r\n\r\n\t\t\t// Mark device as inactive\r\n\t\t\tconst { error } = await serviceSupabase\r\n\t\t\t\t.from('push_subscriptions')\r\n\t\t\t\t.update({ is_active: false })\r\n\t\t\t\t.eq('device_id', deviceId);\r\n\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\t// Unsubscribe from push\r\n\t\t\tif (this.subscription) {\r\n\t\t\t\tawait this.subscription.unsubscribe();\r\n\t\t\t\tthis.subscription = null;\r\n\t\t\t}\r\n\r\n\t\t\t// Remove local storage\r\n\t\t\tlocalStorage.removeItem('aqura-device-id');\r\n\r\n\t\t\tconsole.log('Device unregistered from push notifications');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to unregister device:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Send a test notification\r\n\t */\r\n\tasync sendTestNotification(): Promise<void> {\r\n\t\tif (!browser || Notification.permission !== 'granted') {\r\n\t\t\tconsole.warn('Cannot send notification - permission not granted');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst notification = new Notification('Aqura Test Notification', {\r\n\t\t\tbody: 'Push notifications are working!',\r\n\t\t\ticon: '/favicon.png',\r\n\t\t\tbadge: '/badge-icon.png',\r\n\t\t\ttag: 'test-notification'\r\n\t\t});\r\n\r\n\t\t// Auto-close after 5 seconds\r\n\t\tsetTimeout(() => {\r\n\t\t\tnotification.close();\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\t/**\r\n\t * Show notification when app is open\r\n\t */\r\n\tasync showNotification(payload: NotificationPayload): Promise<void> {\r\n\t\tif (!browser || Notification.permission !== 'granted') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst notification = new Notification(payload.title, {\r\n\t\t\tbody: payload.body,\r\n\t\t\ticon: payload.icon || '/favicon.png',\r\n\t\t\tbadge: payload.badge || '/badge-icon.png',\r\n\t\t\tdata: payload.data,\r\n\t\t\ttag: payload.data?.notification_id || 'aqura-notification',\r\n\t\t\trequireInteraction: true\r\n\t\t});\r\n\r\n\t\t// Handle notification click\r\n\t\tnotification.onclick = (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\twindow.focus();\r\n\t\t\t\r\n\t\t\t// Navigate to notification if needed\r\n\t\t\tif (payload.data?.url) {\r\n\t\t\t\twindow.location.href = payload.data.url;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnotification.close();\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Update device last seen\r\n\t */\r\n\tasync updateLastSeen(): Promise<void> {\r\n\t\tconst deviceId = localStorage.getItem('aqura-device-id');\r\n\t\tif (!deviceId) return;\r\n\r\n\t\ttry {\r\n\t\t\t// Use singleton service role client to avoid multiple instances\r\n\t\t\tif (!serviceRoleClient) {\r\n\t\t\t\tconst { createClient } = await import('@supabase/supabase-js');\r\n\t\t\t\tserviceRoleClient = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\r\n\t\t\t}\r\n\r\n\t\t\tawait serviceRoleClient\r\n\t\t\t\t.from('push_subscriptions')\r\n\t\t\t\t.update({ \r\n\t\t\t\t\tlast_seen: new Date().toISOString(),\r\n\t\t\t\t\tis_active: true \r\n\t\t\t\t})\r\n\t\t\t\t.eq('device_id', deviceId);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to update last seen:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Helper methods\r\n\t */\r\n\tprivate generateDeviceId(): string {\r\n\t\treturn `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\t}\r\n\r\n\t// Generate a UUID v4 from a string (for consistent user_id mapping)\r\n\tprivate generateUUIDFromString(str: string): string {\r\n\t\t// Simple UUID v4 generation from string hash\r\n\t\tlet hash = 0;\r\n\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\tconst char = str.charCodeAt(i);\r\n\t\t\thash = ((hash << 5) - hash) + char;\r\n\t\t\thash = hash & hash; // Convert to 32-bit integer\r\n\t\t}\r\n\t\t\r\n\t\t// Create a proper 32-character hex string from the hash\r\n\t\tconst hex = Math.abs(hash).toString(16).padStart(8, '0');\r\n\t\t// Repeat and extend to get 32 chars\r\n\t\tconst fullHex = (hex + hex + hex + hex).substring(0, 32);\r\n\t\t\r\n\t\t// Format as proper UUID\r\n\t\tconst uuid = `${fullHex.slice(0, 8)}-${fullHex.slice(8, 12)}-4${fullHex.slice(13, 16)}-a${fullHex.slice(17, 20)}-${fullHex.slice(20, 32)}`;\r\n\t\treturn uuid;\r\n\t}\r\n\r\n\tprivate getDeviceType(): 'mobile' | 'desktop' {\r\n\t\tif (!browser) return 'desktop';\r\n\t\t\r\n\t\tconst userAgent = navigator.userAgent;\r\n\t\tconst isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\r\n\t\treturn isMobile ? 'mobile' : 'desktop';\r\n\t}\r\n\r\n\tprivate getBrowserName(): string {\r\n\t\tif (!browser) return 'unknown';\r\n\t\t\r\n\t\tconst userAgent = navigator.userAgent;\r\n\t\t\r\n\t\tif (userAgent.includes('Chrome')) return 'Chrome';\r\n\t\tif (userAgent.includes('Firefox')) return 'Firefox';\r\n\t\tif (userAgent.includes('Safari')) return 'Safari';\r\n\t\tif (userAgent.includes('Edge')) return 'Edge';\r\n\t\t\r\n\t\treturn 'Unknown';\r\n\t}\r\n\r\n\tprivate urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n\t\ttry {\r\n\t\t\tconst padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n\t\t\tconst base64 = (base64String + padding)\r\n\t\t\t\t.replace(/-/g, '+')\r\n\t\t\t\t.replace(/_/g, '/');\r\n\r\n\t\t\tconst rawData = window.atob(base64);\r\n\t\t\tconst outputArray = new Uint8Array(rawData.length);\r\n\r\n\t\t\tfor (let i = 0; i < rawData.length; ++i) {\r\n\t\t\t\toutputArray[i] = rawData.charCodeAt(i);\r\n\t\t\t}\r\n\t\t\treturn outputArray;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to decode VAPID key:', error);\r\n\t\t\tthrow new Error('Invalid VAPID public key format');\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Singleton instance\r\nexport const pushNotificationService = new PushNotificationService();","import { writable } from 'svelte/store';\r\nimport { browser } from '$app/environment';\r\nimport { supabase } from './supabase';\r\nimport { pushNotificationService } from './pushNotifications';\r\nimport { userAuth } from './userAuth';\r\nimport type { User } from '$lib/stores/auth';\r\n\r\n// Types\r\ninterface UserSession {\r\n\tid: string;\r\n\tusername: string;\r\n\trole?: string;\r\n\troleType?: string;\r\n\tuserType?: string;\r\n\tavatar?: string;\r\n\temployeeName?: string;\r\n\tbranchName?: string;\r\n\temployee_id?: string;\r\n\tbranch_id?: string;\r\n\tloginTime: string;\r\n\tdeviceId: string;\r\n\tloginMethod: 'password' | 'quickAccess';\r\n\tisActive: boolean;\r\n}\r\n\r\ninterface DeviceSession {\r\n\tdeviceId: string;\r\n\tusers: UserSession[];\r\n\tcurrentUserId?: string;\r\n\tlastActivity: string;\r\n}\r\n\r\n// Stores\r\nexport const currentUser = writable<UserSession | null>(null);\r\nexport const isAuthenticated = writable<boolean>(false);\r\nexport const deviceSessions = writable<DeviceSession | null>(null);\r\n\r\nexport class PersistentAuthService {\r\n\tprivate sessionCheckInterval: NodeJS.Timeout | null = null;\r\n\tprivate activityTrackingInterval: NodeJS.Timeout | null = null;\r\n\tprivate readonly SESSION_DURATION = 24 * 60 * 60 * 1000; // 24 hours\r\n\tprivate readonly ACTIVITY_UPDATE_INTERVAL = 5 * 60 * 1000; // 5 minutes\r\n\r\n\tconstructor() {\r\n\t\t// Don't auto-initialize in constructor to avoid race conditions\r\n\t\t// Let the layout call initializeAuth() explicitly\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize authentication system\r\n\t */\r\n\tasync initializeAuth(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconsole.log('🔐 Starting persistent auth initialization...');\r\n\t\t\t\r\n\t\t\t// Load device sessions from localStorage\r\n\t\t\tawait this.loadDeviceSessions();\r\n\r\n\t\t\t// Check if there's an active session\r\n\t\t\tconst activeUser = await this.getActiveUser();\r\n\t\t\tif (activeUser) {\r\n\t\t\t\tconsole.log('🔐 Found active user session:', activeUser.username);\r\n\t\t\t\tawait this.setCurrentUser(activeUser);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('🔐 No active user session found');\r\n\t\t\t\t// Ensure auth state is properly set to false\r\n\t\t\t\tcurrentUser.set(null);\r\n\t\t\t\tisAuthenticated.set(false);\r\n\t\t\t}\r\n\r\n\t\t\t// Start session monitoring\r\n\t\t\tthis.startSessionMonitoring();\r\n\r\n\t\t\t// Initialize push notifications for authenticated user\r\n\t\t\tif (activeUser) {\r\n\t\t\t\tawait pushNotificationService.initialize();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log('🔐 Persistent auth initialization complete');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('🔐 Error initializing auth:', error);\r\n\t\t\t// Ensure auth state is properly set to false on error\r\n\t\t\tcurrentUser.set(null);\r\n\t\t\tisAuthenticated.set(false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Login user with quick access code\r\n\t */\r\n\tasync loginWithQuickAccess(quickAccessCode: string): Promise<{ success: boolean; error?: string; user?: UserSession }> {\r\n\t\ttry {\r\n\t\t\t// Use the userAuth service to authenticate\r\n\t\t\tconst { user, token } = await userAuth.loginWithQuickAccess(quickAccessCode);\r\n\r\n\t\t\t// Convert User to UserSession\r\n\t\t\tconst userSession: UserSession = {\r\n\t\t\t\tid: user.id,\r\n\t\t\t\tusername: user.username,\r\n\t\t\t\trole: user.role,\r\n\t\t\t\troleType: user.roleType,\r\n\t\t\t\tuserType: user.userType,\r\n\t\t\t\tavatar: user.avatar,\r\n\t\t\t\temployeeName: user.employeeName,\r\n\t\t\t\tbranchName: user.branchName,\r\n\t\t\t\tloginTime: new Date().toISOString(),\r\n\t\t\t\tdeviceId: this.getDeviceId(),\r\n\t\t\t\tloginMethod: 'quickAccess',\r\n\t\t\t\tisActive: true\r\n\t\t\t};\r\n\r\n\t\t\t// Save session to device\r\n\t\t\tawait this.saveUserSession(userSession);\r\n\r\n\t\t\t// Set as current user\r\n\t\t\tawait this.setCurrentUser(userSession);\r\n\r\n\t\t\t// Initialize push notifications\r\n\t\t\tawait pushNotificationService.initialize();\r\n\r\n\t\t\t// Log login activity\r\n\t\t\tawait this.logUserActivity('quick_access_login', userSession.id);\r\n\r\n\t\t\treturn { success: true, user: userSession };\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Quick access login error:', error);\r\n\t\t\treturn { success: false, error: error instanceof Error ? error.message : 'Quick access login failed. Please try again.' };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Login user and create persistent session\r\n\t */\r\n\tasync login(username: string, password: string): Promise<{ success: boolean; error?: string; user?: UserSession }> {\r\n\t\ttry {\r\n\t\t\t// Authenticate with Supabase\r\n\t\t\tconst { data: authData, error: authError } = await supabase.auth.signInWithPassword({\r\n\t\t\t\temail: username.includes('@') ? username : `${username}@aqura.local`,\r\n\t\t\t\tpassword\r\n\t\t\t});\r\n\r\n\t\t\tif (authError || !authData.user) {\r\n\t\t\t\treturn { success: false, error: authError?.message || 'Authentication failed' };\r\n\t\t\t}\r\n\r\n\t\t\t// Get user details from users table\r\n\t\t\tconst { data: userData, error: userError } = await supabase\r\n\t\t\t\t.from('users')\r\n\t\t\t\t.select(`\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t\temail,\r\n\t\t\t\t\trole,\r\n\t\t\t\t\thr_employees (\r\n\t\t\t\t\t\tid,\r\n\t\t\t\t\t\temployee_id,\r\n\t\t\t\t\t\tbranch_id\r\n\t\t\t\t\t)\r\n\t\t\t\t`)\r\n\t\t\t\t.eq('id', authData.user.id)\r\n\t\t\t\t.single();\r\n\r\n\t\t\tif (userError || !userData) {\r\n\t\t\t\treturn { success: false, error: 'User data not found' };\r\n\t\t\t}\r\n\r\n\t\t\t// Create user session\r\n\t\t\tconst userSession: UserSession = {\r\n\t\t\t\tid: userData.id,\r\n\t\t\t\tusername: userData.username,\r\n\t\t\t\trole: userData.role,\r\n\t\t\t\temployee_id: userData.hr_employees?.[0]?.employee_id,\r\n\t\t\t\tbranch_id: userData.hr_employees?.[0]?.branch_id,\r\n\t\t\t\tloginTime: new Date().toISOString(),\r\n\t\t\t\tdeviceId: this.getDeviceId(),\r\n\t\t\t\tloginMethod: 'password',\r\n\t\t\t\tisActive: true\r\n\t\t\t};\r\n\r\n\t\t\t// Save session to device\r\n\t\t\tawait this.saveUserSession(userSession);\r\n\r\n\t\t\t// Set as current user\r\n\t\t\tawait this.setCurrentUser(userSession);\r\n\r\n\t\t\t// Initialize push notifications\r\n\t\t\tawait pushNotificationService.initialize();\r\n\r\n\t\t\t// Log login activity\r\n\t\t\tawait this.logUserActivity('login', userSession.id);\r\n\r\n\t\t\treturn { success: true, user: userSession };\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Login error:', error);\r\n\t\t\treturn { success: false, error: 'Login failed. Please try again.' };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Logout current user\r\n\t */\r\n\tasync logout(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst current = await this.getCurrentUser();\r\n\t\t\tif (current) {\r\n\t\t\t\t// Log logout activity (but don't let it block logout)\r\n\t\t\t\tthis.logUserActivity('logout', current.id).catch(err => \r\n\t\t\t\t\tconsole.warn('Failed to log logout activity:', err)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Unregister device from push notifications\r\n\t\t\t\tawait pushNotificationService.unregisterDevice();\r\n\r\n\t\t\t\t// Remove user from device sessions\r\n\t\t\t\tawait this.removeUserSession(current.id);\r\n\r\n\t\t\t\t// Clear Supabase session\r\n\t\t\t\tawait supabase.auth.signOut();\r\n\t\t\t}\r\n\r\n\t\t\t// Clear current user\r\n\t\t\tcurrentUser.set(null);\r\n\t\t\tisAuthenticated.set(false);\r\n\r\n\t\t\t// Stop session monitoring\r\n\t\t\tthis.stopSessionMonitoring();\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Logout error:', error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Switch to another user on the same device\r\n\t */\r\n\tasync switchUser(userId: string): Promise<{ success: boolean; error?: string; user?: UserSession }> {\r\n\t\ttry {\r\n\t\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\t\tif (!deviceSession) {\r\n\t\t\t\treturn { success: false, error: 'No device session found' };\r\n\t\t\t}\r\n\r\n\t\t\tconst targetUser = deviceSession.users.find(u => u.id === userId);\r\n\t\t\tif (!targetUser) {\r\n\t\t\t\treturn { success: false, error: 'User not found on this device' };\r\n\t\t\t}\r\n\r\n\t\t\t// Check if session is still valid\r\n\t\t\tconst sessionAge = Date.now() - new Date(targetUser.loginTime).getTime();\r\n\t\t\tif (sessionAge > this.SESSION_DURATION) {\r\n\t\t\t\t// Session expired, remove it\r\n\t\t\t\tawait this.removeUserSession(userId);\r\n\t\t\t\treturn { success: false, error: 'Session expired. Please login again.' };\r\n\t\t\t}\r\n\r\n\t\t\t// Switch to target user\r\n\t\t\tawait this.setCurrentUser(targetUser);\r\n\r\n\t\t\t// Update device session\r\n\t\t\tdeviceSession.currentUserId = userId;\r\n\t\t\tdeviceSession.lastActivity = new Date().toISOString();\r\n\t\t\tawait this.saveDeviceSession(deviceSession);\r\n\r\n\t\t\t// Re-initialize push notifications for new user\r\n\t\t\tawait pushNotificationService.unregisterDevice();\r\n\t\t\tawait pushNotificationService.initialize();\r\n\r\n\t\t\t// Log switch activity\r\n\t\t\tawait this.logUserActivity('switch', userId);\r\n\r\n\t\t\treturn { success: true, user: targetUser };\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Switch user error:', error);\r\n\t\t\treturn { success: false, error: 'Failed to switch user' };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get all users logged in on this device\r\n\t */\r\n\tasync getDeviceUsers(): Promise<UserSession[]> {\r\n\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\treturn deviceSession?.users.filter(u => u.isActive) || [];\r\n\t}\r\n\r\n\t/**\r\n\t * Check if user session is valid\r\n\t */\r\n\tasync isSessionValid(userId: string): Promise<boolean> {\r\n\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\tif (!deviceSession) return false;\r\n\r\n\t\tconst user = deviceSession.users.find(u => u.id === userId);\r\n\t\tif (!user) return false;\r\n\r\n\t\tconst sessionAge = Date.now() - new Date(user.loginTime).getTime();\r\n\t\treturn sessionAge <= this.SESSION_DURATION;\r\n\t}\r\n\r\n\t/**\r\n\t * Private methods\r\n\t */\r\n\tprivate async loadDeviceSessions(): Promise<void> {\r\n\t\tif (!browser) return;\r\n\r\n\t\ttry {\r\n\t\t\tconst sessionData = localStorage.getItem('aqura-device-session');\r\n\t\t\tif (sessionData) {\r\n\t\t\t\tconst session = JSON.parse(sessionData);\r\n\t\t\t\tdeviceSessions.set(session);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error loading device sessions:', error);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async saveDeviceSession(session: DeviceSession): Promise<void> {\r\n\t\tif (!browser) return;\r\n\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('aqura-device-session', JSON.stringify(session));\r\n\t\t\tdeviceSessions.set(session);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error saving device session:', error);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async getDeviceSession(): Promise<DeviceSession | null> {\r\n\t\tif (!browser) return null;\r\n\r\n\t\ttry {\r\n\t\t\tconst sessionData = localStorage.getItem('aqura-device-session');\r\n\t\t\treturn sessionData ? JSON.parse(sessionData) : null;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error getting device session:', error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async saveUserSession(user: UserSession): Promise<void> {\r\n\t\tlet deviceSession = await this.getDeviceSession();\r\n\r\n\t\tif (!deviceSession) {\r\n\t\t\tdeviceSession = {\r\n\t\t\t\tdeviceId: this.getDeviceId(),\r\n\t\t\t\tusers: [],\r\n\t\t\t\tlastActivity: new Date().toISOString()\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Remove existing session for this user\r\n\t\tdeviceSession.users = deviceSession.users.filter(u => u.id !== user.id);\r\n\r\n\t\t// Add new session\r\n\t\tdeviceSession.users.push(user);\r\n\t\tdeviceSession.currentUserId = user.id;\r\n\t\tdeviceSession.lastActivity = new Date().toISOString();\r\n\r\n\t\tawait this.saveDeviceSession(deviceSession);\r\n\t}\r\n\r\n\tprivate async removeUserSession(userId: string): Promise<void> {\r\n\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\tif (!deviceSession) return;\r\n\r\n\t\tdeviceSession.users = deviceSession.users.filter(u => u.id !== userId);\r\n\r\n\t\tif (deviceSession.currentUserId === userId) {\r\n\t\t\tdeviceSession.currentUserId = undefined;\r\n\t\t}\r\n\r\n\t\tdeviceSession.lastActivity = new Date().toISOString();\r\n\t\tawait this.saveDeviceSession(deviceSession);\r\n\t}\r\n\r\n\tprivate async getActiveUser(): Promise<UserSession | null> {\r\n\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\tif (!deviceSession || !deviceSession.currentUserId) return null;\r\n\r\n\t\tconst user = deviceSession.users.find(u => u.id === deviceSession.currentUserId);\r\n\t\tif (!user) return null;\r\n\r\n\t\t// Check if session is valid\r\n\t\tconst isValid = await this.isSessionValid(user.id);\r\n\t\tif (!isValid) {\r\n\t\t\tawait this.removeUserSession(user.id);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn user;\r\n\t}\r\n\r\n\tprivate async getCurrentUser(): Promise<UserSession | null> {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tlet unsubscribe: (() => void) | undefined;\r\n\t\t\t\r\n\t\t\t// Set a timeout to prevent hanging\r\n\t\t\tconst timeout = setTimeout(() => {\r\n\t\t\t\tif (unsubscribe) unsubscribe();\r\n\t\t\t\tresolve(null);\r\n\t\t\t}, 1000);\r\n\t\t\t\r\n\t\t\tunsubscribe = currentUser.subscribe((user) => {\r\n\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\tif (unsubscribe) unsubscribe();\r\n\t\t\t\tresolve(user);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tprivate async setCurrentUser(user: UserSession): Promise<void> {\r\n\t\tcurrentUser.set(user);\r\n\t\tisAuthenticated.set(true);\r\n\r\n\t\t// Defer last activity update to avoid race conditions during initialization\r\n\t\tsetTimeout(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tawait this.updateLastActivity();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn('Failed to update last activity:', error);\r\n\t\t\t}\r\n\t\t}, 100);\r\n\t}\r\n\r\n\tprivate async updateLastActivity(): Promise<void> {\r\n\t\tconst deviceSession = await this.getDeviceSession();\r\n\t\tif (deviceSession) {\r\n\t\t\tdeviceSession.lastActivity = new Date().toISOString();\r\n\t\t\tawait this.saveDeviceSession(deviceSession);\r\n\t\t}\r\n\r\n\t\t// Update push notification service\r\n\t\tawait pushNotificationService.updateLastSeen();\r\n\t}\r\n\r\n\tprivate startSessionMonitoring(): void {\r\n\t\t// Check session validity every minute\r\n\t\tthis.sessionCheckInterval = setInterval(async () => {\r\n\t\t\tconst current = await this.getCurrentUser();\r\n\t\t\tif (current) {\r\n\t\t\t\tconst isValid = await this.isSessionValid(current.id);\r\n\t\t\t\tif (!isValid) {\r\n\t\t\t\t\tawait this.logout();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 60 * 1000);\r\n\r\n\t\t// Update activity every 5 minutes\r\n\t\tthis.activityTrackingInterval = setInterval(async () => {\r\n\t\t\tconst current = await this.getCurrentUser();\r\n\t\t\tif (current) {\r\n\t\t\t\tawait this.updateLastActivity();\r\n\t\t\t}\r\n\t\t}, this.ACTIVITY_UPDATE_INTERVAL);\r\n\t}\r\n\r\n\tprivate stopSessionMonitoring(): void {\r\n\t\tif (this.sessionCheckInterval) {\r\n\t\t\tclearInterval(this.sessionCheckInterval);\r\n\t\t\tthis.sessionCheckInterval = null;\r\n\t\t}\r\n\r\n\t\tif (this.activityTrackingInterval) {\r\n\t\t\tclearInterval(this.activityTrackingInterval);\r\n\t\t\tthis.activityTrackingInterval = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getDeviceId(): string {\r\n\t\tlet deviceId = localStorage.getItem('aqura-device-id');\r\n\t\tif (!deviceId) {\r\n\t\t\tdeviceId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\t\t\tlocalStorage.setItem('aqura-device-id', deviceId);\r\n\t\t}\r\n\t\treturn deviceId;\r\n\t}\r\n\r\n\tprivate async logUserActivity(activity: string, userId: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconsole.log('🔍 [PersistentAuth] Logging user activity:', { activity, userId });\r\n\t\t\t\r\n\t\t\tconst result = await supabase.from('user_audit_logs').insert({\r\n\t\t\t\tuser_id: userId,\r\n\t\t\t\taction: activity,\r\n\t\t\t\tip_address: null, // We could get this from a service if needed\r\n\t\t\t\tuser_agent: navigator.userAgent\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (result.error) {\r\n\t\t\t\tconsole.error('🔍 [PersistentAuth] Audit log insert error:', result.error);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('🔍 [PersistentAuth] Audit log inserted successfully');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('🔍 [PersistentAuth] Error logging user activity:', error);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Singleton instance\r\nexport const persistentAuthService = new PersistentAuthService();\r\n\r\n// Listen for user activity to update last seen\r\nif (browser) {\r\n\t['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {\r\n\t\tdocument.addEventListener(event, () => {\r\n\t\t\tpersistentAuthService['updateLastActivity']();\r\n\t\t}, { passive: true });\r\n\t});\r\n}"],"file":"_app/immutable/chunks/COcYFW_x.js"}