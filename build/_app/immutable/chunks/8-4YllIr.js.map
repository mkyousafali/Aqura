{"version":3,"file":"8-4YllIr.js","sources":["../../../../../../src/lib/stores/windowManager.ts"],"sourcesContent":["import { writable, derived, get } from 'svelte/store';\r\nimport type { Writable, Readable } from 'svelte/store';\r\n\r\nexport interface WindowConfig {\r\n\tid: string;\r\n\ttitle: string;\r\n\tcomponent: any; // Svelte component\r\n\tprops?: Record<string, any>;\r\n\ticon?: string;\r\n\tposition: { x: number; y: number };\r\n\tsize: { width: number; height: number };\r\n\tminSize?: { width: number; height: number };\r\n\tmaxSize?: { width: number; height: number };\r\n\tresizable?: boolean;\r\n\tminimizable?: boolean;\r\n\tmaximizable?: boolean;\r\n\tclosable?: boolean;\r\n\tmodal?: boolean;\r\n\tzIndex: number;\r\n\tstate: 'normal' | 'minimized' | 'maximized';\r\n\tisActive: boolean;\r\n\tisDragging: boolean;\r\n\tisResizing: boolean;\r\n}\r\n\r\nexport interface TaskbarItem {\r\n\twindowId: string;\r\n\ttitle: string;\r\n\ticon?: string;\r\n\tisActive: boolean;\r\n\tisMinimized: boolean;\r\n}\r\n\r\n// Window Manager Store\r\nclass WindowManager {\r\n\tprivate windows: Writable<Map<string, WindowConfig>> = writable(new Map());\r\n\tprivate activeWindowId: Writable<string | null> = writable(null);\r\n\tprivate nextZIndex = 1001;\r\n\tprivate windowCounter = 0;\r\n\r\n\t// Derived stores\r\n\tpublic readonly windowList: Readable<WindowConfig[]> = derived(\r\n\t\tthis.windows,\r\n\t\t($windows) => Array.from($windows.values()).sort((a, b) => a.zIndex - b.zIndex)\r\n\t);\r\n\r\n\tpublic readonly taskbarItems: Readable<TaskbarItem[]> = derived(\r\n\t\tthis.windows,\r\n\t\t($windows) => Array.from($windows.values())\r\n\t\t\t.map(w => ({\r\n\t\t\t\twindowId: w.id,\r\n\t\t\t\ttitle: w.title,\r\n\t\t\t\ticon: w.icon,\r\n\t\t\t\tisActive: w.isActive,\r\n\t\t\t\tisMinimized: w.state === 'minimized'\r\n\t\t\t}))\r\n\t\t\t.sort((a, b) => a.title.localeCompare(b.title))\r\n\t);\r\n\r\n\tpublic readonly activeWindow: Readable<WindowConfig | null> = derived(\r\n\t\t[this.windows, this.activeWindowId],\r\n\t\t([$windows, $activeId]) => $activeId ? $windows.get($activeId) || null : null\r\n\t);\r\n\r\n\t/**\r\n\t * Open a new window\r\n\t */\r\n\tpublic openWindow(config: Partial<WindowConfig> & { title: string; component: any }): string {\r\n\t\tconst windowId = config.id || `window-${++this.windowCounter}`;\r\n\t\t\r\n\t\t// Check if window already exists\r\n\t\tconst existingWindows = get(this.windows);\r\n\t\tif (existingWindows.has(windowId)) {\r\n\t\t\tthis.activateWindow(windowId);\r\n\t\t\treturn windowId;\r\n\t\t}\r\n\r\n\t\tconst defaultPosition = this.calculateDefaultPosition();\r\n\t\tconst newWindow: WindowConfig = {\r\n\t\t\tid: windowId,\r\n\t\t\ttitle: config.title,\r\n\t\t\tcomponent: config.component,\r\n\t\t\tprops: config.props || {},\r\n\t\t\ticon: config.icon,\r\n\t\t\tposition: config.position || defaultPosition,\r\n\t\t\tsize: config.size || { width: 800, height: 600 },\r\n\t\t\tminSize: config.minSize || { width: 400, height: 300 },\r\n\t\t\tmaxSize: config.maxSize,\r\n\t\t\tresizable: config.resizable !== false,\r\n\t\t\tminimizable: config.minimizable !== false,\r\n\t\t\tmaximizable: config.maximizable !== false,\r\n\t\t\tclosable: config.closable !== false,\r\n\t\t\tmodal: config.modal || false,\r\n\t\t\tzIndex: this.nextZIndex++,\r\n\t\t\tstate: 'normal',\r\n\t\t\tisActive: true,\r\n\t\t\tisDragging: false,\r\n\t\t\tisResizing: false\r\n\t\t};\r\n\r\n\t\tthis.windows.update(windows => {\r\n\t\t\t// Deactivate all other windows\r\n\t\t\twindows.forEach(w => w.isActive = false);\r\n\t\t\twindows.set(windowId, newWindow);\r\n\t\t\treturn windows;\r\n\t\t});\r\n\r\n\t\tthis.activeWindowId.set(windowId);\r\n\t\treturn windowId;\r\n\t}\r\n\r\n\t/**\r\n\t * Close a window\r\n\t */\r\n\tpublic closeWindow(windowId: string): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (!window) return windows;\r\n\r\n\t\t\twindows.delete(windowId);\r\n\r\n\t\t\t// If this was the active window, activate another one\r\n\t\t\tif (window.isActive && windows.size > 0) {\r\n\t\t\t\tconst nextWindow = Array.from(windows.values())\r\n\t\t\t\t\t.filter(w => w.state !== 'minimized')\r\n\t\t\t\t\t.sort((a, b) => b.zIndex - a.zIndex)[0];\r\n\t\t\t\t\r\n\t\t\t\tif (nextWindow) {\r\n\t\t\t\t\tnextWindow.isActive = true;\r\n\t\t\t\t\tthis.activeWindowId.set(nextWindow.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.activeWindowId.set(null);\r\n\t\t\t\t}\r\n\t\t\t} else if (window.isActive) {\r\n\t\t\t\tthis.activeWindowId.set(null);\r\n\t\t\t}\r\n\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Activate a window (bring to front)\r\n\t */\r\n\tpublic activateWindow(windowId: string): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (!window) return windows;\r\n\r\n\t\t\t// Deactivate all windows\r\n\t\t\twindows.forEach(w => w.isActive = false);\r\n\r\n\t\t\t// Activate and bring to front\r\n\t\t\twindow.isActive = true;\r\n\t\t\twindow.zIndex = this.nextZIndex++;\r\n\t\t\t\r\n\t\t\t// If minimized, restore it\r\n\t\t\tif (window.state === 'minimized') {\r\n\t\t\t\twindow.state = 'normal';\r\n\t\t\t}\r\n\r\n\t\t\tthis.activeWindowId.set(windowId);\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Minimize a window\r\n\t */\r\n\tpublic minimizeWindow(windowId: string): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (!window) return windows;\r\n\r\n\t\t\twindow.state = 'minimized';\r\n\t\t\twindow.isActive = false;\r\n\r\n\t\t\t// Activate another window if this was active\r\n\t\t\tif (get(this.activeWindowId) === windowId) {\r\n\t\t\t\tconst nextWindow = Array.from(windows.values())\r\n\t\t\t\t\t.filter(w => w.id !== windowId && w.state !== 'minimized')\r\n\t\t\t\t\t.sort((a, b) => b.zIndex - a.zIndex)[0];\r\n\t\t\t\t\r\n\t\t\t\tif (nextWindow) {\r\n\t\t\t\t\tnextWindow.isActive = true;\r\n\t\t\t\t\tthis.activeWindowId.set(nextWindow.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.activeWindowId.set(null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Maximize/restore a window\r\n\t */\r\n\tpublic toggleMaximizeWindow(windowId: string): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (!window) return windows;\r\n\r\n\t\t\tif (window.state === 'maximized') {\r\n\t\t\t\twindow.state = 'normal';\r\n\t\t\t} else {\r\n\t\t\t\twindow.state = 'maximized';\r\n\t\t\t\t// Bring maximized window to front\r\n\t\t\t\twindow.zIndex = this.nextZIndex++;\r\n\t\t\t\t// Ensure window is active when maximizing\r\n\t\t\t\twindows.forEach(w => w.isActive = false);\r\n\t\t\t\twindow.isActive = true;\r\n\t\t\t}\r\n\r\n\t\t\treturn windows;\r\n\t\t});\r\n\r\n\t\t// Update active window ID if maximizing\r\n\t\tconst windows = get(this.windows);\r\n\t\tconst window = windows.get(windowId);\r\n\t\tif (window && window.state === 'maximized') {\r\n\t\t\tthis.activeWindowId.set(windowId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update window position\r\n\t */\r\n\tpublic updateWindowPosition(windowId: string, position: { x: number; y: number }): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (window) {\r\n\t\t\t\twindow.position = position;\r\n\t\t\t}\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Update window size\r\n\t */\r\n\tpublic updateWindowSize(windowId: string, size: { width: number; height: number }): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (window) {\r\n\t\t\t\twindow.size = size;\r\n\t\t\t}\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Set window dragging state\r\n\t */\r\n\tpublic setWindowDragging(windowId: string, isDragging: boolean): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (window) {\r\n\t\t\t\twindow.isDragging = isDragging;\r\n\t\t\t}\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Set window resizing state\r\n\t */\r\n\tpublic setWindowResizing(windowId: string, isResizing: boolean): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\tconst window = windows.get(windowId);\r\n\t\t\tif (window) {\r\n\t\t\t\twindow.isResizing = isResizing;\r\n\t\t\t}\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Close all windows\r\n\t */\r\n\tpublic closeAllWindows(): void {\r\n\t\tthis.windows.set(new Map());\r\n\t\tthis.activeWindowId.set(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimize all windows\r\n\t */\r\n\tpublic minimizeAllWindows(): void {\r\n\t\tthis.windows.update(windows => {\r\n\t\t\twindows.forEach(window => {\r\n\t\t\t\twindow.state = 'minimized';\r\n\t\t\t\twindow.isActive = false;\r\n\t\t\t});\r\n\t\t\tthis.activeWindowId.set(null);\r\n\t\t\treturn windows;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate default position for new windows (cascade)\r\n\t */\r\n\tprivate calculateDefaultPosition(): { x: number; y: number } {\r\n\t\tconst windows = get(this.windows);\r\n\t\tconst offset = windows.size * 30;\r\n\t\t\r\n\t\treturn {\r\n\t\t\tx: 100 + (offset % 300),\r\n\t\t\ty: 100 + (offset % 200)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Get window by ID\r\n\t */\r\n\tpublic getWindow(windowId: string): WindowConfig | null {\r\n\t\treturn get(this.windows).get(windowId) || null;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if any modal windows are open\r\n\t */\r\n\tpublic hasModalWindows(): boolean {\r\n\t\treturn Array.from(get(this.windows).values()).some(w => w.modal && w.state !== 'minimized');\r\n\t}\r\n\r\n\t// Store getters for reactive subscriptions\r\n\tpublic get windows$() { return this.windows; }\r\n\tpublic get activeWindowId$() { return this.activeWindowId; }\r\n}\r\n\r\n// Export singleton instance\r\nexport const windowManager = new WindowManager();\r\n"],"names":["WindowManager","__publicField","writable","derived","$windows","a","b","w","$activeId","config","windowId","get","defaultPosition","newWindow","windows","window","nextWindow","position","size","isDragging","isResizing","offset","windowManager"],"mappings":"+MAkCA,MAAMA,CAAc,CAApB,cACSC,EAAA,eAA+CC,EAAS,IAAI,GAAK,GACjED,EAAA,sBAA0CC,EAAS,IAAI,GACvDD,EAAA,kBAAa,MACbA,EAAA,qBAAgB,GAGRA,EAAA,kBAAuCE,EACtD,KAAK,QACJC,GAAa,MAAM,KAAKA,EAAS,OAAA,CAAQ,EAAE,KAAK,CAACC,EAAGC,IAAMD,EAAE,OAASC,EAAE,MAAM,CAAA,GAG/DL,EAAA,oBAAwCE,EACvD,KAAK,QACJC,GAAa,MAAM,KAAKA,EAAS,QAAQ,EACxC,IAAIG,IAAM,CACV,SAAUA,EAAE,GACZ,MAAOA,EAAE,MACT,KAAMA,EAAE,KACR,SAAUA,EAAE,SACZ,YAAaA,EAAE,QAAU,WAAA,EACxB,EACD,KAAK,CAACF,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,CAAA,GAGhCL,EAAA,oBAA8CE,EAC7D,CAAC,KAAK,QAAS,KAAK,cAAc,EAClC,CAAC,CAACC,EAAUI,CAAS,IAAMA,GAAYJ,EAAS,IAAII,CAAS,GAAK,IAAO,GAMnE,WAAWC,EAA2E,CAC5F,MAAMC,EAAWD,EAAO,IAAM,UAAU,EAAE,KAAK,aAAa,GAI5D,GADwBE,EAAI,KAAK,OAAO,EACpB,IAAID,CAAQ,EAC/B,YAAK,eAAeA,CAAQ,EACrBA,EAGR,MAAME,EAAkB,KAAK,yBAAA,EACvBC,EAA0B,CAC/B,GAAIH,EACJ,MAAOD,EAAO,MACd,UAAWA,EAAO,UAClB,MAAOA,EAAO,OAAS,CAAA,EACvB,KAAMA,EAAO,KACb,SAAUA,EAAO,UAAYG,EAC7B,KAAMH,EAAO,MAAQ,CAAE,MAAO,IAAK,OAAQ,GAAA,EAC3C,QAASA,EAAO,SAAW,CAAE,MAAO,IAAK,OAAQ,GAAA,EACjD,QAASA,EAAO,QAChB,UAAWA,EAAO,YAAc,GAChC,YAAaA,EAAO,cAAgB,GACpC,YAAaA,EAAO,cAAgB,GACpC,SAAUA,EAAO,WAAa,GAC9B,MAAOA,EAAO,OAAS,GACvB,OAAQ,KAAK,aACb,MAAO,SACP,SAAU,GACV,WAAY,GACZ,WAAY,EAAA,EAGb,YAAK,QAAQ,OAAOK,IAEnBA,EAAQ,QAAQP,GAAKA,EAAE,SAAW,EAAK,EACvCO,EAAQ,IAAIJ,EAAUG,CAAS,EACxBC,EACP,EAED,KAAK,eAAe,IAAIJ,CAAQ,EACzBA,CACR,CAKO,YAAYA,EAAwB,CAC1C,KAAK,QAAQ,OAAOI,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,GAAI,CAACK,EAAQ,OAAOD,EAKpB,GAHAA,EAAQ,OAAOJ,CAAQ,EAGnBK,EAAO,UAAYD,EAAQ,KAAO,EAAG,CACxC,MAAME,EAAa,MAAM,KAAKF,EAAQ,QAAQ,EAC5C,OAAOP,GAAKA,EAAE,QAAU,WAAW,EACnC,KAAK,CAACF,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EAAE,CAAC,EAEnCW,GACHA,EAAW,SAAW,GACtB,KAAK,eAAe,IAAIA,EAAW,EAAE,GAErC,KAAK,eAAe,IAAI,IAAI,CAE9B,MAAWD,EAAO,UACjB,KAAK,eAAe,IAAI,IAAI,EAG7B,OAAOD,CACR,CAAC,CACF,CAKO,eAAeJ,EAAwB,CAC7C,KAAK,QAAQ,OAAOI,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAKK,IAGLD,EAAQ,QAAQP,GAAKA,EAAE,SAAW,EAAK,EAGvCQ,EAAO,SAAW,GAClBA,EAAO,OAAS,KAAK,aAGjBA,EAAO,QAAU,cACpBA,EAAO,MAAQ,UAGhB,KAAK,eAAe,IAAIL,CAAQ,GACzBI,CACR,CAAC,CACF,CAKO,eAAeJ,EAAwB,CAC7C,KAAK,QAAQ,OAAOI,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,GAAI,CAACK,EAAQ,OAAOD,EAMpB,GAJAC,EAAO,MAAQ,YACfA,EAAO,SAAW,GAGdJ,EAAI,KAAK,cAAc,IAAMD,EAAU,CAC1C,MAAMM,EAAa,MAAM,KAAKF,EAAQ,OAAA,CAAQ,EAC5C,OAAOP,GAAKA,EAAE,KAAOG,GAAYH,EAAE,QAAU,WAAW,EACxD,KAAK,CAACF,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EAAE,CAAC,EAEnCW,GACHA,EAAW,SAAW,GACtB,KAAK,eAAe,IAAIA,EAAW,EAAE,GAErC,KAAK,eAAe,IAAI,IAAI,CAE9B,CAEA,OAAOF,CACR,CAAC,CACF,CAKO,qBAAqBJ,EAAwB,CACnD,KAAK,QAAQ,OAAOI,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAKK,IAEDA,EAAO,QAAU,YACpBA,EAAO,MAAQ,UAEfA,EAAO,MAAQ,YAEfA,EAAO,OAAS,KAAK,aAErBD,EAAQ,QAAQP,GAAKA,EAAE,SAAW,EAAK,EACvCQ,EAAO,SAAW,KAGZD,CACR,CAAC,EAID,MAAMC,EADUJ,EAAI,KAAK,OAAO,EACT,IAAID,CAAQ,EAC/BK,GAAUA,EAAO,QAAU,aAC9B,KAAK,eAAe,IAAIL,CAAQ,CAElC,CAKO,qBAAqBA,EAAkBO,EAA0C,CACvF,KAAK,QAAQ,OAAOH,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAIK,IACHA,EAAO,SAAWE,GAEZH,CACR,CAAC,CACF,CAKO,iBAAiBJ,EAAkBQ,EAA+C,CACxF,KAAK,QAAQ,OAAOJ,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAIK,IACHA,EAAO,KAAOG,GAERJ,CACR,CAAC,CACF,CAKO,kBAAkBJ,EAAkBS,EAA2B,CACrE,KAAK,QAAQ,OAAOL,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAIK,IACHA,EAAO,WAAaI,GAEdL,CACR,CAAC,CACF,CAKO,kBAAkBJ,EAAkBU,EAA2B,CACrE,KAAK,QAAQ,OAAON,GAAW,CAC9B,MAAMC,EAASD,EAAQ,IAAIJ,CAAQ,EACnC,OAAIK,IACHA,EAAO,WAAaK,GAEdN,CACR,CAAC,CACF,CAKO,iBAAwB,CAC9B,KAAK,QAAQ,IAAI,IAAI,GAAK,EAC1B,KAAK,eAAe,IAAI,IAAI,CAC7B,CAKO,oBAA2B,CACjC,KAAK,QAAQ,OAAOA,IACnBA,EAAQ,QAAQC,GAAU,CACzBA,EAAO,MAAQ,YACfA,EAAO,SAAW,EACnB,CAAC,EACD,KAAK,eAAe,IAAI,IAAI,EACrBD,EACP,CACF,CAKQ,0BAAqD,CAE5D,MAAMO,EADUV,EAAI,KAAK,OAAO,EACT,KAAO,GAE9B,MAAO,CACN,EAAG,IAAOU,EAAS,IACnB,EAAG,IAAOA,EAAS,GAAA,CAErB,CAKO,UAAUX,EAAuC,CACvD,OAAOC,EAAI,KAAK,OAAO,EAAE,IAAID,CAAQ,GAAK,IAC3C,CAKO,iBAA2B,CACjC,OAAO,MAAM,KAAKC,EAAI,KAAK,OAAO,EAAE,OAAA,CAAQ,EAAE,KAAKJ,GAAKA,EAAE,OAASA,EAAE,QAAU,WAAW,CAC3F,CAGA,IAAW,UAAW,CAAE,OAAO,KAAK,OAAS,CAC7C,IAAW,iBAAkB,CAAE,OAAO,KAAK,cAAgB,CAC5D,CAGO,MAAMe,EAAgB,IAAItB"}